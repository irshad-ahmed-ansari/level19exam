"use strict";
(globalThis["webpackJsonp_yves_default"] = globalThis["webpackJsonp_yves_default"] || []).push([["measurement-quantity-selector"],{

/***/ "./vendor/spryker-shop/product-measurement-unit-widget/src/SprykerShop/Yves/ProductMeasurementUnitWidget/Theme/default/components/molecules/measurement-quantity-selector/measurement-quantity-selector.ts":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ./vendor/spryker-shop/product-measurement-unit-widget/src/SprykerShop/Yves/ProductMeasurementUnitWidget/Theme/default/components/molecules/measurement-quantity-selector/measurement-quantity-selector.ts ***!
  \*****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ MeasurementQuantitySelector)
/* harmony export */ });
/* harmony import */ var ShopUi_models_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ShopUi/models/component */ "./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/models/component.ts");
/* eslint-disable max-lines */

/*
 * @tag example This code provides example of using the Product Measurement Unit.
 */


class MeasurementQuantitySelector extends ShopUi_models_component__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(...arguments);
    this.qtyInSalesUnitInput = void 0;
    this.qtyInBaseUnitInput = void 0;
    this.measurementUnitInput = void 0;
    this.addToCartButton = void 0;
    this.quantityBetweenUnits = void 0;
    this.minimumQuantity = void 0;
    this.maximumQuantity = void 0;
    this.measurementUnitChoice = void 0;
    this.baseUnit = void 0;
    this.salesUnits = void 0;
    this.currentSalesUnit = void 0;
    this.productQuantityStorage = void 0;
    this.currentValue = void 0;
    this.translations = void 0;
    this.decimals = 4;
    this.factor = 10;
    // eslint-disable-next-line @typescript-eslint/no-magic-numbers
    this.degree = [2, 3];
  }
  readyCallback() {}
  init() {
    this.qtyInSalesUnitInput = this.getElementsByClassName(this.jsName + "__sales-unit-quantity")[0];
    if (!this.qtyInSalesUnitInput) {
      return;
    }
    this.qtyInBaseUnitInput = this.getElementsByClassName(this.jsName + "__base-unit-quantity")[0];
    this.measurementUnitInput = this.getElementsByClassName(this.jsName + "__select-measurement-unit")[0];
    this.addToCartButton = this.getElementsByClassName(this.jsName + "__add-to-cart-button")[0];
    this.quantityBetweenUnits = this.getElementsByClassName(this.jsName + "__quantity-between-units")[0];
    this.minimumQuantity = this.getElementsByClassName(this.jsName + "__minimum-quantity")[0];
    this.maximumQuantity = this.getElementsByClassName(this.jsName + "__maximum-quantity")[0];
    this.measurementUnitChoice = this.getElementsByClassName(this.jsName + "__measurement-unit-choice")[0];
    this.initJson();
    this.initTranslations();
    this.initCurrentSalesUnit();
    this.mapEvents();
  }
  mapEvents() {
    this.qtyInSalesUnitInput.addEventListener('change', () => this.qtyInputChange());
    this.measurementUnitInput.addEventListener('change', event => this.measurementUnitInputChange(event));
  }
  initJson() {
    var measurementUnitData = JSON.parse(this.measurementJSONString);
    this.baseUnit = measurementUnitData.baseUnit;
    this.salesUnits = measurementUnitData.salesUnits;
    this.productQuantityStorage = measurementUnitData.productQuantityStorage;
  }
  initTranslations() {
    this.translations = JSON.parse(this.getElementsByClassName(this.jsName + "__measurement-unit-translation")[0].innerHTML);
  }
  initCurrentSalesUnit() {
    this.salesUnits.forEach(salesUnit => {
      if (salesUnit.is_default) {
        this.currentSalesUnit = salesUnit;
      }
    });
  }
  qtyInputChange(qtyInSalesUnits) {
    if (typeof qtyInSalesUnits === 'undefined') {
      qtyInSalesUnits = +this.qtyInSalesUnitInput.value;
    }
    var error = false;
    var qtyInBaseUnits = this.multiply(qtyInSalesUnits, +this.currentSalesUnit.conversion);
    if ((qtyInBaseUnits - this.getMinQuantity()) % this.getQuantityInterval() !== 0) {
      error = true;
      this.hideNotifications();
      this.quantityBetweenUnits.classList.remove('is-hidden');
    } else if (qtyInBaseUnits < this.getMinQuantity()) {
      error = true;
      this.hideNotifications();
      this.minimumQuantity.classList.remove('is-hidden');
    } else if (this.getMaxQuantity() > 0 && qtyInBaseUnits > this.getMaxQuantity()) {
      error = true;
      this.hideNotifications();
      this.maximumQuantity.classList.remove('is-hidden');
    }
    if (error && !isFinite(qtyInSalesUnits)) {
      this.addToCartButton.setAttribute('disabled', 'disabled');
      this.qtyInSalesUnitInput.setAttribute('disabled', 'disabled');
      return;
    }
    if (error) {
      this.addToCartButton.setAttribute('disabled', 'disabled');
      this.askCustomerForCorrectInput(qtyInSalesUnits);
      return;
    }
    this.qtyInBaseUnitInput.value = qtyInBaseUnits.toString();
    this.addToCartButton.removeAttribute('disabled');
    this.hideNotifications();
  }
  hideNotifications() {
    this.measurementUnitChoice.classList.add('is-hidden');
    this.quantityBetweenUnits.classList.add('is-hidden');
    this.minimumQuantity.classList.add('is-hidden');
    this.maximumQuantity.classList.add('is-hidden');
  }
  askCustomerForCorrectInput(qtyInSalesUnits) {
    var choicesList = this.measurementUnitChoice.getElementsByClassName('list')[0];
    var currentChoice = this.measurementUnitChoice.getElementsByClassName(this.jsName + "__current-choice")[0];
    var minChoice = this.getMinChoice(qtyInSalesUnits);
    var maxChoice = this.getMaxChoice(qtyInSalesUnits, minChoice);
    choicesList.innerHTML = '';
    currentChoice.innerHTML = '';
    currentChoice.textContent = this.round(qtyInSalesUnits, this.decimals) + " " + this.getUnitName(this.currentSalesUnit.product_measurement_unit.code);
    var choiceElements = [];
    choiceElements.push(this.createChoiceElement(minChoice));
    if (maxChoice !== minChoice) {
      choiceElements.push(this.createChoiceElement(maxChoice));
    }
    choiceElements.forEach(element => element !== null ? choicesList.appendChild(element) : undefined);
    this.measurementUnitChoice.classList.remove('is-hidden');
  }
  createChoiceElement(qtyInBaseUnits) {
    if (qtyInBaseUnits > 0) {
      var choiceElem = document.createElement('span');
      var qtyInSalesUnits = qtyInBaseUnits / this.currentSalesUnit.conversion;
      var measurementSalesUnitName = this.getUnitName(this.currentSalesUnit.product_measurement_unit.code);
      var measurementBaseUnitName = this.getUnitName(this.baseUnit.code);
      choiceElem.classList.add('link');
      choiceElem.setAttribute('data-base-unit-qty', qtyInBaseUnits.toString());
      choiceElem.setAttribute('data-sales-unit-qty', qtyInSalesUnits.toString());
      choiceElem.textContent = "(" + this.round(qtyInSalesUnits, this.decimals).toString().toString() + " " + measurementSalesUnitName + ") = (" + qtyInBaseUnits + " " + measurementBaseUnitName + ")";
      choiceElem.onclick = event => {
        var element = event.currentTarget;
        var qtyInBaseUnitsChoice = parseFloat(element.dataset.baseUnitQty);
        var qtyInSalesUnitsChoice = parseFloat(element.dataset.salesUnitQty);
        this.selectQty(qtyInBaseUnitsChoice, qtyInSalesUnitsChoice);
      };
      choiceElem.style.display = 'block';
      return choiceElem;
    }
  }
  selectQty(qtyInBaseUnits, qtyInSalesUnits) {
    this.qtyInBaseUnitInput.value = qtyInBaseUnits.toString();
    this.qtyInSalesUnitInput.value = this.round(qtyInSalesUnits, this.decimals).toString().toString();
    this.addToCartButton.removeAttribute('disabled');
    this.qtyInSalesUnitInput.removeAttribute('disabled');
    this.measurementUnitChoice.classList.add('is-hidden');
  }
  getMinChoice(qtyInSalesUnits) {
    var qtyInBaseUnits = this.floor(this.multiply(qtyInSalesUnits, this.currentSalesUnit.conversion));
    if (qtyInBaseUnits < this.getMinQuantity()) {
      return this.getMinQuantity();
    }
    if ((qtyInBaseUnits - this.getMinQuantity()) % this.getQuantityInterval() !== 0 || this.getMaxQuantity() > 0 && qtyInBaseUnits > this.getMaxQuantity()) {
      return this.getMinChoice((qtyInBaseUnits - 1) / this.currentSalesUnit.conversion);
    }
    return qtyInBaseUnits;
  }
  getMaxChoice(qtyInSalesUnits, minChoice) {
    var qtyInBaseUnits = this.ceil(this.multiply(qtyInSalesUnits, this.currentSalesUnit.conversion));
    if (this.getMaxQuantity() > 0 && qtyInBaseUnits > this.getMaxQuantity()) {
      qtyInBaseUnits = this.getMaxQuantity();
      if ((qtyInBaseUnits - this.getMinQuantity()) % this.getQuantityInterval() !== 0) {
        qtyInBaseUnits = qtyInBaseUnits - (qtyInBaseUnits - this.getMinQuantity()) % this.getQuantityInterval();
      }
      return qtyInBaseUnits;
    }
    if ((qtyInBaseUnits - this.getMinQuantity()) % this.getQuantityInterval() !== 0 || qtyInBaseUnits <= minChoice) {
      return this.getMaxChoice((qtyInBaseUnits + 1) / this.currentSalesUnit.conversion, minChoice);
    }
    return qtyInBaseUnits;
  }
  floor(value) {
    if (Math.floor(value) > 0) {
      return Math.floor(value);
    }
    return Math.ceil(value);
  }
  ceil(value) {
    return Math.ceil(value);
  }
  round(value, decimals) {
    return Number(Math.round(parseFloat(value + "e" + decimals)) + "e-" + decimals);
  }
  multiply(a, b) {
    var result = a * this.factor * (b * this.factor) / Math.pow(this.factor, this.degree[0]);
    return Math.floor(result * Math.pow(this.factor, this.degree[1])) / Math.pow(this.factor, this.degree[1]);
  }
  getMinQuantity() {
    if (typeof this.productQuantityStorage !== 'undefined' && this.productQuantityStorage.hasOwnProperty('quantity_min')) {
      return this.productQuantityStorage.quantity_min;
    }
    return 1;
  }
  getMaxQuantity() {
    if (typeof this.productQuantityStorage !== 'undefined' && this.productQuantityStorage.hasOwnProperty('quantity_max') && this.productQuantityStorage.quantity_max !== null) {
      return this.productQuantityStorage.quantity_max;
    }
    return 0;
  }
  getQuantityInterval() {
    if (typeof this.productQuantityStorage !== 'undefined' && this.productQuantityStorage.hasOwnProperty('quantity_interval')) {
      return this.productQuantityStorage.quantity_interval;
    }
    return 1;
  }
  measurementUnitInputChange(event) {
    var salesUnitId = parseInt(event.currentTarget.value);
    var salesUnit = this.getSalesUnitById(salesUnitId);
    var qtyInSalesUnits = +this.qtyInSalesUnitInput.value;
    var qtyInBaseUnits = this.multiply(qtyInSalesUnits, this.currentSalesUnit.conversion);
    qtyInSalesUnits = qtyInBaseUnits / salesUnit.conversion;
    this.currentSalesUnit = salesUnit;
    if (isFinite(qtyInSalesUnits)) {
      this.qtyInSalesUnitInput.value = this.round(qtyInSalesUnits, this.decimals).toString();
    }
    this.qtyInputChange(qtyInSalesUnits);
  }
  getSalesUnitById(salesUnitId) {
    return this.salesUnits.find(item => salesUnitId === item.id_product_measurement_sales_unit);
  }
  getBaseSalesUnit() {
    return this.salesUnits.find(item => this.baseUnit.id_product_measurement_unit === item.product_measurement_unit.id_product_measurement_unit);
  }
  getUnitName(key) {
    if (this.translations.hasOwnProperty(key)) {
      return this.translations[key];
    }
    return key;
  }
  get measurementJSONString() {
    return this.getAttribute('json');
  }
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,