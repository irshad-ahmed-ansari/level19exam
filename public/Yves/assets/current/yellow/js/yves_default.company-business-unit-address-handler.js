"use strict";
(globalThis["webpackJsonp_yves_default"] = globalThis["webpackJsonp_yves_default"] || []).push([["company-business-unit-address-handler"],{

/***/ "./vendor/spryker-shop/company-widget/src/SprykerShop/Yves/CompanyWidget/Theme/default/components/molecules/company-business-unit-address-handler/company-business-unit-address-handler.ts":
/*!*************************************************************************************************************************************************************************************************!*\
  !*** ./vendor/spryker-shop/company-widget/src/SprykerShop/Yves/CompanyWidget/Theme/default/components/molecules/company-business-unit-address-handler/company-business-unit-address-handler.ts ***!
  \*************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CompanyBusinessUnitAddressHandler)
/* harmony export */ });
/* harmony import */ var ShopUi_models_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ShopUi/models/component */ "./vendor/spryker-shop/shop-ui/src/SprykerShop/Yves/ShopUi/Theme/default/models/component.ts");

var EVENT_HIDDEN_ADDRESS_INPUT_CHANGE = 'hidden-address-input-change';
/**
 * @event hidden-address-input-change An event which is triggered after the new address are selected.
 */
class CompanyBusinessUnitAddressHandler extends ShopUi_models_component__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor() {
    super(...arguments);
    /**
     * The current form.
     */
    this.form = void 0;
    /**
     * Data object of the address list.
     */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    this.addressesDataObject = void 0;
    /**
     * Collection of the address select elements.
     */
    this.addressesSelects = void 0;
    /**
     * The selected address.
     */
    this.currentAddress = void 0;
    /**
     * The hidden input with selected address by default.
     */
    this.hiddenDefaultAddressInput = void 0;
    /**
     * The custom event.
     */
    this.hiddenAddressInputChangeEvent = void 0;
    /**
     * The shipping address select element.
     */
    this.shippingAddressToggler = void 0;
  }
  readyCallback() {
    this.form = document.querySelector(this.formSelector);
    this.addressesSelects = Array.from(this.form.querySelectorAll(this.dataSelector));
    this.hiddenDefaultAddressInput = this.form.querySelector(this.defaultAddressSelector);
    if (this.shippingAddressTogglerSelector) {
      this.shippingAddressToggler = document.querySelector(this.shippingAddressTogglerSelector);
    }
    this.initAddressesData();
    this.mapEvents();
    this.initHiddenAddressInputChangeEvent();
    this.fillDefaultAddress();
    if (this.shippingAddressToggler) {
      this.toggleSplitDeliveryAddressFormValue();
    }
  }
  mapEvents() {
    this.addressesSelects.forEach(selectElement => {
      selectElement.addEventListener('change', () => {
        this.setCurrentAddress(selectElement);
        this.fillHiddenInputsWithNewAddress();
      });
    });
    if (this.shippingAddressToggler) {
      this.shippingAddressToggler.addEventListener('change', () => {
        this.toggleSplitDeliveryAddressFormValue();
      });
    }
  }
  initHiddenAddressInputChangeEvent() {
    this.hiddenAddressInputChangeEvent = new CustomEvent(EVENT_HIDDEN_ADDRESS_INPUT_CHANGE);
    // eslint-disable-next-line deprecation/deprecation
    this.hiddenAddressInputChangeEvent.initEvent('change', true, true);
  }
  toggleSplitDeliveryAddressFormValue() {
    var hiddenInputIdCustomerShippingAddress = document.querySelector(this.shippingAddressHiddenInputSelector);
    var hiddenInputIdCompanyShippingAddress = document.querySelector(this.shippingCompanyAddressHiddenInputSelector);
    if (this.shippingAddressToggler.value === this.optionValueDeliverToMultipleAddresses) {
      hiddenInputIdCustomerShippingAddress.value = this.optionValueDeliverToMultipleAddresses;
      hiddenInputIdCompanyShippingAddress.value = this.optionValueDeliverToMultipleAddresses;
    }
  }
  setCurrentAddress(selectElement) {
    this.currentAddress = selectElement.options[selectElement.selectedIndex].getAttribute('value');
  }
  fillHiddenInputsWithNewAddress() {
    var currentAddressList = this.addressesDataObject[this.currentAddress];
    var hiddenInputIdCustomerAddress = this.form.querySelector(this.addressHiddenInputSelector);
    var hiddenInputIdCompanyAddress = this.form.querySelector(this.companyAddressHiddenInputSelector);
    this.hiddenDefaultAddressInput.value = this.currentAddress;
    this.fillHiddenInputAddressesFields(currentAddressList, this.addressHiddenInputSelector, 'id_customer_address');
    this.fillHiddenInputAddressesFields(currentAddressList, this.companyAddressHiddenInputSelector, 'id_company_unit_address');
    hiddenInputIdCustomerAddress.dispatchEvent(this.hiddenAddressInputChangeEvent);
    hiddenInputIdCompanyAddress.dispatchEvent(this.hiddenAddressInputChangeEvent);
  }
  fillDefaultAddress() {
    var hiddenDefaultAddressInputValue = this.hiddenDefaultAddressInput.getAttribute('value');
    if (hiddenDefaultAddressInputValue) {
      this.currentAddress = hiddenDefaultAddressInputValue;
      this.fillHiddenInputsWithNewAddress();
    }
  }

  /**
   * Fills the form element's value with an address value.
   * @param address A data object for filling the fields.
   */
  fillHiddenInputAddressesFields(address, selector, idAddressKey) {
    var hiddenInputIdAddress = this.form.querySelector(selector);
    hiddenInputIdAddress.value = address ? address[idAddressKey] : '';
    if (!hiddenInputIdAddress.value && this.currentAddress === this.newAddressOptionValue) {
      hiddenInputIdAddress.value = this.newAddressOptionValue;
    }
  }
  initAddressesData() {
    var data = this.getAttribute('addresses');
    this.addressesDataObject = JSON.parse(data);
  }

  /**
   * Gets a querySelector name of the form element.
   */
  get formSelector() {
    return this.getAttribute('form-selector');
  }

  /**
   * Gets a querySelector name of the address select elements.
   */
  get dataSelector() {
    return this.getAttribute('data-selector');
  }

  /**
   * Gets a querySelector name of a hidden default address input.
   */
  get defaultAddressSelector() {
    return this.getAttribute('default-address-selector');
  }

  /**
   * Gets a querySelector name of a hidden customer id input.
   */
  get addressHiddenInputSelector() {
    return this.getAttribute('address-hidden-input-selector');
  }

  /**
   * Gets a querySelector name of a hidden company unit id input.
   */
  get companyAddressHiddenInputSelector() {
    return this.getAttribute('company-address-hidden-input-selector');
  }

  /**
   * Gets a querySelector name of a hidden shipping customer id input.
   */
  get shippingAddressHiddenInputSelector() {
    return this.getAttribute('shipping-address-hidden-input-selector');
  }

  /**
   * Gets a querySelector name of a hidden shipping customer id input.
   */
  get shippingCompanyAddressHiddenInputSelector() {
    return this.getAttribute('shipping-company-address-hidden-input-selector');
  }

  /**
   * Gets if the split delivery form is defined.
   */
  get optionValueDeliverToMultipleAddresses() {
    return this.getAttribute('toggle-option-value');
  }

  /**
   * Gets a querySelector name of the shipping address select element.
   */
  get shippingAddressTogglerSelector() {
    return this.getAttribute('shipping-address-toggler-selector');
  }
  get newAddressOptionValue() {
    return this.getAttribute('new-address-option-value');
  }
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,